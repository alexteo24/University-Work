ID: 1
Execution stack: [
(v2:Ref(int))
(v3:Ref(int))
(cnt:int)
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
(v1:Ref(int))

]

Symbol table: 
Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
(v2:Ref(int))
(v3:Ref(int))
(cnt:int)
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
(v3:Ref(int))
(cnt:int)
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
(v2:Ref(int))

]

Symbol table: v1:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
(v3:Ref(int))
(cnt:int)
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: v1:(0 -> int)
v2:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
(cnt:int)
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
(v3:Ref(int))

]

Symbol table: v1:(0 -> int)
v2:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
(cnt:int)
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: v1:(0 -> int)
v2:(0 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
(cnt:int)

]

Symbol table: v1:(0 -> int)
v2:(0 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v1, 2}
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:0
v1:(0 -> int)
v2:(0 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
New{v1, 2}

]

Symbol table: cnt:0
v1:(0 -> int)
v2:(0 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 
Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v2, 3}
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:0
v1:(1 -> int)
v2:(0 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 1 -> 2

Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
New{v2, 3}

]

Symbol table: cnt:0
v1:(1 -> int)
v2:(0 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 1 -> 2

Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
New{v3, 4}
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:0
v1:(1 -> int)
v2:(2 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3

Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
New{v3, 4}

]

Symbol table: cnt:0
v1:(1 -> int)
v2:(2 -> int)
v3:(0 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3

Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
newLatch(cnt, ReadHeap{v2})
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:0
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
newLatch(cnt, ReadHeap{v2})

]

Symbol table: cnt:0
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 
----------------------------------------------------

ID: 1
Execution stack: [
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]
[
Fork{
	WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
await(cnt)
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 2
Execution stack: [
WriteHeap{v1, ReadHeap{v1} * 10}
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 2
Execution stack: [
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]
[
WriteHeap{v1, ReadHeap{v1} * 10}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 2
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 2
Execution stack: [
Print{ReadHeap{v1}}
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 2
Execution stack: [
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]
[
Print{ReadHeap{v1}}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 
File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 2
Execution stack: [
countDown(cnt)
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]
[
countDown(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 3

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]
[
Print{2}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 2
Execution stack: [
Fork{
	WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 2
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 3
Execution stack: [
WriteHeap{v2, ReadHeap{v2} * 10}
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 3
Execution stack: [
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]
[
WriteHeap{v2, ReadHeap{v2} * 10}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 3
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 3
Execution stack: [
Print{ReadHeap{v2}}
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 3
Execution stack: [
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]
[
Print{ReadHeap{v2}}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 3
Execution stack: [
countDown(cnt)
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 3
Execution stack: [
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]
[
countDown(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 2

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 3
Execution stack: [
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]
[
Print{3}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 3
Execution stack: [
Fork{
	WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)
 	}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 3
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 4
Execution stack: [
WriteHeap{v3, ReadHeap{v3} * 10}
Print{ReadHeap{v3}}
countDown(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 4
Execution stack: [
Print{ReadHeap{v3}}
countDown(cnt)

]
[
WriteHeap{v3, ReadHeap{v3} * 10}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 4

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 1

----------------------------------------------------

ID: 4
Execution stack: [
Print{ReadHeap{v3}}
countDown(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 1

----------------------------------------------------

ID: 4
Execution stack: [
countDown(cnt)

]
[
Print{ReadHeap{v3}}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 1

----------------------------------------------------

ID: 4
Execution stack: [
countDown(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 1

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]
[
await(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 4
Execution stack: [
Print{4}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}
countDown(cnt)
Print{100}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 4
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: [
countDown(cnt)
Print{100}

]
[
Print{100}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: [
countDown(cnt)
Print{100}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4
100

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}

]
[
countDown(cnt)

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4
100

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}

]
[
Print{1}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4
100

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: [
Print{100}

]

Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4
100
1

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

ID: 1
Execution stack: 
Symbol table: cnt:1
v1:(1 -> int)
v2:(2 -> int)
v3:(3 -> int)

Output list: 20
2
30
3
40
4
100
1
100

File table: 
Heap table: 1 -> 20
2 -> 30
3 -> 40

Latch table: 1 -> 0

----------------------------------------------------

