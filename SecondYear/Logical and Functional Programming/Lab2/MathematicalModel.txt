2. 
a. Write a predicate to remove all occurrences of a certain atom from a list. 
b. Define a predicate to produce a list of pairs (atom n) from an initial list of atoms. In this initial list atom has 
n occurrences. 
Eg.: numberatom([1, 2, 1, 2, 1, 3, 1], X) => X = [[1, 4], [2, 2], [3, 1]]. 


a) removeOccurencesElem([L1, L2, L3, ..., LN], E): if N = 0, return []
                                                if L1 == E, return removeOccurencesElem(L2, L3..., LN, E)
                                                otherwise, return L1 U removeOccurencesElem(L2, L3..., LN, E)

b) occurencesElements([L1, L2, L3, ..., LN], [l1, l2, ..., ln], X): if N = 0, return []
                                            if countOcc([l1, l2, ..., ln], L1) == 1, return occurencesElements([L2, ..., LN], [l1, l2, ..., ln], X)
                                            else return occurencesElements([L2, ..., LN], L1 U [l1, l2, ..., ln], X U [L1, countOcc([L1, L2, ..., LN], L1)])


  countOcc([L1, L2, ..., LN], E): if N == 0, return 0
                                if L1 == E, return 1 + countOcc(L2, L3, ..., LN, E)
                                otherwise return countOcc(L2, L3, ..., LN, E)